{-
Pentagonal numbers are generated by the formula, P(n) = n * (3 * n - 1) / 2.
The first ten pentagonal numbers are:

1, 5, 12, 22, 35, 51, 70, 92, 117, 145, ...

It can be seen that P(4) + P(7) = 22 + 70 = 92 = P(8). However, their
difference, 70 - 22 = 48, is not pentagonal.

Find the pair of pentagonal numbers, P(j) and P(k), for which their sum and
difference is pentagonal and D = |P(k) - P(j)| is minimised; what is the
value of D?
-}

module Main where

import Data.Maybe (mapMaybe)

-- function P
p :: Int -> Int
p n = (n * (3 * n - 1)) `div` 2

-- Pentagonal number list
pentagonals :: [Int]
pentagonals = [p n | n <- [1..]]

-- check whether number is pentagonals or not
isPentagonals :: Int -> Bool
isPentagonals n = elem n $ takeWhile (<=n) pentagonals

-- check number pair is pentagonal for ther sum and difference
isAnswer :: (Int, Int) -> Bool
isAnswer (x,y) = isPentagonals (x + y) && isPentagonals (x - y)

-- return pair answer as Maybe
answer :: (Int, Int) -> Maybe Int
answer (x,y) = if isAnswer (x,y) then Just (x - y) else Nothing

-- return pentagonal number pair list nunder argument index.
pentagonalPairs :: Int -> [(Int, Int)]
pentagonalPairs idx = zip ((repeat . p) idx) $ map (p . (idx-)) [1..(idx-1)]

-- found answer for "P(idx) - P(x)" where 1 <= x < idx
foundAnswer :: Int -> Maybe Int
foundAnswer idx = if null lst then Nothing else Just ((abs . head) lst)
                  where lst = mapMaybe answer $ pentagonalPairs idx

main = print $ head $ mapMaybe foundAnswer [1..]


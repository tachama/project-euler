{-
Problem 12
The sequence of triangle numbers is generated by adding the natural numbers.
So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28.
The first ten terms would be:

  1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...

Let us list the factors of the first seven triangle numbers:

   1: 1
   3: 1,3
   6: 1,2,3,6
  10: 1,2,5,10
  15: 1,3,5,15
  21: 1,3,7,21
  28: 1,2,4,7,14,28

We can see that 28 is the first triangle number to have over five divisors.

What is the value of the first triangle number to have over five hundred divisors?
-}

module Main where

-- problem input
input_num :: Int
input_num = 500

-- prime numbers. (XXX: it is easy implementation, maybe can tuning...
--  => [2,3,5,7,11,...]
primes :: [Int]
primes = [n | n <- [2..], all (\x -> n `mod` x /= 0) [2..(n-1)]]

-- triangle_nums
--  => [1,3,6,10,15,21,28...]
triangle_nums :: [Int]
triangle_nums = [(n * (n + 1)) `div` 2 | n <- [1..]]



-- return minimum prime factor of n
prime_factor :: Int -> Int
prime_factor n = head $ dropWhile (\x -> n `mod` x /= 0) primes

-- prime decomposition, return lists of prime factors of n
prime_decomp :: Int -> [Int]
prime_decomp n = prime_decomp_sub n []
-- subroutine for prime_decomp
prime_decomp_sub :: Int -> [Int] -> [Int]
prime_decomp_sub 1 ns = ns
prime_decomp_sub n ns = prime_decomp_sub (n `div` pr) (pr:ns)
                          where pr = prime_factor n


-- pick up num of continuous number of lists
-- eg) [2,2,2,2,3,3,5,7] -> [4,2,1,1]
sets2nums :: [Int] -> [Int]
sets2nums [] = []
sets2nums (n:ns) = sets2nums_sub n 1 ns
-- subroutine for sets2nums
sets2nums_sub :: Int -> Int -> [Int] -> [Int]
sets2nums_sub _ cnt [] = [cnt]
sets2nums_sub x cnt (n:ns) | x == n = sets2nums_sub x (cnt + 1) ns
                           | otherwise = cnt : (sets2nums (n:ns))


-- calculate combination of lists
calc_combination :: [Int] -> Int
calc_combination ns = product $ map (+1) ns


-- return factors number of n
nfactors :: Int -> Int
nfactors n = calc_combination $ sets2nums $ prime_decomp n


-- solve problem
solve :: Int -> Int
solve n = head $ dropWhile (\x -> nfactors x < n) triangle_nums

main :: IO ()
main = print $ solve input_num
